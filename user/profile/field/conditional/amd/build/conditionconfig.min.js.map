{"version":3,"sources":["../src/conditionconfig.js"],"names":["define","$","notification","templates","ajax","Dialogue","ModOtherFields","ConditionConfig","selectSelector","inputSelector","triggerSelector","fieldId","click","showConfig","bind","prototype","otherFields","options","popup","self","val","replace","split","forEach","value","index","push","option","getOtherFields","done","context","fields","render","html","initConditionConfig","fail","exception","retrieveConditionConfig","jsonstring","parseJSON","applyRestriction","source","sourceid","id","sourceatt","attr","targetatt","targetid","hasClass","slashedtargetatt","is","parent","find","prop","body","getContent","currentconfig","slashedoption","requiredfields","field","each","hiddenfields","on","setConditionConfig","close","e","target","data","shortname","datastring","JSON","stringify","getFields","then","values","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle opening a dialogue to configure condition data.\n *\n * @module     profilefield_conditional/conditionconfig\n * @copyright  2016 Shamim Rezaie <http://foodle.org>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/notification', 'core/templates', 'core/ajax',\n        'profilefield_conditional/dialogue', 'profilefield_conditional/otherfields'],\n    function($, notification, templates, ajax, Dialogue, ModOtherFields) {\n\n        /**\n         * Condition config object.\n         * @param {String} selectSelector The select box selector.\n         * @param {String} inputSelector The hidden input field selector.\n         * @param {String} triggerSelector The trigger selector.\n         * @param {Number} fieldId Current field's ID.\n         */\n        var ConditionConfig = function(selectSelector, inputSelector, triggerSelector, fieldId) {\n            this.selectSelector = selectSelector;\n            this.inputSelector = inputSelector;\n            this.triggerSelector = triggerSelector;\n            this.fieldId = fieldId;\n\n            $(triggerSelector).click(this.showConfig.bind(this));\n        };\n\n        /** @var {String} The select box selector. */\n        ConditionConfig.prototype.selectSelector = null;\n        /** @var {String} The hidden field selector. */\n        ConditionConfig.prototype.inputSelector = null;\n        /** @var {String} The trigger selector. */\n        ConditionConfig.prototype.triggerSelector = null;\n        /** @var {Number} fieldId Field ID. */\n        ConditionConfig.prototype.fieldId = null;\n        /** @var {Array} otherFields ID and name of the scales. */\n        ConditionConfig.prototype.otherFields = null;\n        /** @var {Array} options Menu options. */\n        ConditionConfig.prototype.options = null;\n        /** @var {Dialogue} Reference to the popup. */\n        ConditionConfig.prototype.popup = null;\n\n        /**\n         * Displays the condition configuration dialogue.\n         *\n         * @method showConfig\n         */\n        ConditionConfig.prototype.showConfig = function() {\n            var self = this;\n\n            this.options = [];\n            $(this.selectSelector).val().replace(/\\r\\n/, '\\n').split('\\n').forEach(function(value, index) {\n                if (value) {\n                    self.options.push({index: index, option: value});\n                }\n            });\n            /*\n            if (this.options.length == 0) {\n                // This should not happen.\n                return;\n            }\n            */\n\n            this.getOtherFields(this.fieldId).done(function() {\n\n                var context = {\n                    options: self.options,\n                    fields: self.otherFields\n                };\n\n                // Dish up the form.\n                templates.render('profilefield_conditional/condition_configuration_page', context)\n                    .done(function(html) {\n                        new Dialogue(\n                            '',\n                            html,\n                            self.initConditionConfig.bind(self)\n                        );\n                    }).fail(notification.exception);\n            }).fail(notification.exception);\n        };\n\n        /**\n         * Gets the condition configuration if it was set.\n         *\n         * @method retrieveConditionConfig\n         * @return {Object|String} condition configuration or empty string.\n         */\n        ConditionConfig.prototype.retrieveConditionConfig = function() {\n            var jsonstring = $(this.inputSelector).val();\n            if (jsonstring !== '') {\n                return $.parseJSON(jsonstring);\n            }\n            return '';\n        };\n\n        ConditionConfig.prototype.applyRestriction = function(source) {\n            var sourceid = source.id;\n            var sourceatt = $(source).attr('data-field');\n            var targetatt = '';\n            var targetid = '';\n\n            if ($(source).hasClass('profilefield_conditional_field_required')) {\n                targetatt = sourceatt.replace('profilefield_conditional_field_required_', 'profilefield_conditional_field_hidden_');\n                targetid = sourceid.replace('required_', 'hidden_');\n            } else if ($(source).hasClass('profilefield_conditional_field_hidden')) {\n                targetatt = sourceatt.replace('profilefield_conditional_field_hidden_', 'profilefield_conditional_field_required_');\n                targetid = sourceid.replace('hidden_', 'required_');\n            }\n\n            if (targetid === '' || targetid == sourceid) {\n                return;\n            }\n\n            var slashedtargetatt = targetatt\n                    .replace(/\\\\/g, '\\\\\\\\')\n                    .replace(/'/g, '\\\\\\'')\n                    .replace(/\"/g, '\\\\\"')\n                    .replace(/\\0/g, '\\\\0');\n\n            if ($(source).is(':checked')) {\n                $(source).parent().parent().find('[data-field=\"' + slashedtargetatt + '\"]').attr('checked', false);\n                $(source).parent().parent().find('[data-field=\"' + slashedtargetatt + '\"]').prop('disabled', true);\n            } else {\n                $(source).parent().parent().find('[data-field=\"' + slashedtargetatt + '\"]').prop('disabled', false);\n            }\n        };\n\n        /**\n         * Initialises the condition configuration dialogue.\n         *\n         * @method initConditionConfig\n         * @param {Dialogue} popup Dialogue object to initialise.\n         */\n        ConditionConfig.prototype.initConditionConfig = function(popup) {\n            this.popup = popup;\n            var self = this;\n            var body = $(popup.getContent());\n            // Set up the popup to show the current configuration.\n            var currentconfig = this.retrieveConditionConfig();\n            // Set up the form only if there is configuration settings to set.\n            if (currentconfig !== '') {\n                currentconfig.forEach(function(option) {\n                    var slashedoption = option.option\n                            .replace(/\\\\/g, '\\\\\\\\')\n                            .replace(/'/g, '\\\\\\'')\n                            .replace(/\"/g, '\\\\\"')\n                            .replace(/\\0/g, '\\\\0');\n                    option.requiredfields.forEach(function(field) {\n                        body.find('[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field + '\"]')\n                                .attr('checked', true);\n                        body.find('[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field + '\"]')\n                                .each(\n                            function() {\n                                self.applyRestriction(this);\n                            }\n                        );\n                    });\n                    option.hiddenfields.forEach(function(field) {\n                        body.find('[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field + '\"]')\n                                .attr('checked', true);\n                        body.find('[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field + '\"]').each(\n                            function() {\n                                self.applyRestriction(this);\n                            }\n                        );\n                    });\n                });\n            }\n            body.on('click', '[data-action=\"close\"]', function() {\n                this.setConditionConfig();\n                popup.close();\n            }.bind(this));\n            body.on('click', '[data-action=\"cancel\"]', function() {\n                popup.close();\n            });\n            body.on('click', '[type=\"checkbox\"]', function(e) {\n                this.applyRestriction(e.target);\n            }.bind(this));\n        };\n\n        /**\n         * Set the condition configuration back into a JSON string in the hidden element.\n         *\n         * @method setConditionConfig\n         */\n        ConditionConfig.prototype.setConditionConfig = function() {\n            var self = this;\n            var body = $(this.popup.getContent());\n            // Get the data.\n            var data = [];\n            this.options.forEach(function(option) {\n                var requiredfields = [];\n                var hiddenfields = [];\n                var slashedoption = option.option\n                        .replace(/\\\\/g, '\\\\\\\\')\n                        .replace(/'/g, '\\\\\\'')\n                        .replace(/\"/g, '\\\\\"')\n                        .replace(/\\0/g, '\\\\0');\n                self.otherFields.forEach(function(field) {\n                    if (body.find(\n                            '[data-field=\"profilefield_conditional_field_required_' + slashedoption + '_' + field.shortname + '\"]'\n                            ).is(':checked')) {\n                        requiredfields.push(field.shortname);\n                    }\n                    if (body.find(\n                            '[data-field=\"profilefield_conditional_field_hidden_' + slashedoption + '_' + field.shortname + '\"]'\n                            ).is(':checked')) {\n                        hiddenfields.push(field.shortname);\n                    }\n                });\n                data.push({\n                    option: option.option,\n                    requiredfields: requiredfields,\n                    hiddenfields: hiddenfields\n                });\n            });\n            var datastring = JSON.stringify(data);\n            // Send to the hidden field on the form.\n            $(this.inputSelector).val(datastring);\n        };\n\n        /**\n         * Get all existing custom profile fields except the current field.\n         *\n         * @method getOtherFields\n         * @param {Number} fieldId The id of current field.\n         * @return {Promise} A deffered object with field information.\n         */\n        ConditionConfig.prototype.getOtherFields = function(fieldId) {\n            return ModOtherFields.getFields(fieldId).then(function(values) {\n                this.otherFields = values;\n                return values;\n            }.bind(this));\n        };\n\n        return {\n\n            /**\n             * Main initialisation.\n             *\n             * @param {String} selectSelector The select box selector.\n             * @param {String} inputSelector The hidden input field selector.\n             * @param {String} triggerSelector The trigger selector.\n             * @param {Number} fieldId The current fieldid.\n             * @return {ConditionConfig} A new instance of ConditionConfig.\n             * @method init\n             */\n            init: function(selectSelector, inputSelector, triggerSelector, fieldId) {\n                return new ConditionConfig(selectSelector, inputSelector, triggerSelector, fieldId);\n            }\n        };\n    }\n);\n"],"file":"conditionconfig.min.js"}